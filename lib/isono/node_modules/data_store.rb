# -*- coding: utf-8 -*-

require 'sequel'

module Isono
  module NodeModules
    class DataStore < Base
      include Logger

      config_section do
        desc "Destination database server to be connected."
        database_dsn ''

        desc "Block for create new connection and its setup."
        connection_block proc { |myself|
          next if Sequel::DATABASES.first
          
          db = Sequel.connect(myself.config_section.database_dsn)
          DataStore.logger.info("connected to the database: #{myself.config_section.database_dsn}, #{db}")
        }

        desc "Block for disconnect DB connections"
        disconnection_block proc { |myself|
          Sequel::DATABASES.each { |v|
            v.disconnect
            DataStore.logger.info("disconnected database connection: #{v}")
          }
        }

        desc "database thread number"
        database_thread 10
      end


      def self.create_instance(node)
        @instance = self.new(node)
      end

      def self.pass(&blk)
        @instance.db_writer_thread.pass {
          process_single_tx(blk)
        }
      end

      def self.barrier(&blk)
        @instance.db_writer_thread.barrier {
          process_single_tx(blk)
        }
      end

      def self.process_single_tx(blk)
        @instance.establish_connection
        db = Sequel::DATABASES.first
        begin
          db.transaction {
            blk.call
          }
        rescue Sequel::DatabaseError, Sequel::DatabaseConnectionError => e
          db.disconnect
          raise e
        end
      end

      def self.disconnected?
        Sequel::DATABASES.first.nil? || Sequel::DATABASES.first.pool.size == 0
      end

      attr_reader :db_writer_thread

      initialize_hook do
        @db_writer_thread = ThreadPool.new(config_section.database_thread.to_i, 'DataStore')
        DataStore.create_instance(node)
      end
      
      terminate_hook do
        @db_writer_thread.shutdown
        config_section.disconnection_block.call(myinstance)
      end

      def establish_connection
        config_section.connection_block.call(self)
      end

    end
  end
end
