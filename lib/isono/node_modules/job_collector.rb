# -*- coding: utf-8 -*-

module Isono
  module NodeModules
    class JobCollector < Base

      config_section do
        desc "count to send sql."
        retry_count 3
        desc "second(s) to wait until send the next sql."
        wait_time_sec 1
      end

      initialize_hook do
        rpc = RpcChannel.new(node)

        app = Rack::DataStore.new(Dispatch.new(config_section.retry_count, config_section.wait_time_sec))
        
        rpc.register_endpoint('job-collector', app)
      end

      terminate_hook do
      end

      class Dispatch
        def initialize(retry_count, wait_time_sec)
          @retry_count = retry_count
          @wait_time_sec = wait_time_sec

        end

        def record
          params = @req.args[0]
          params[:node_id]=@req.sender

          retry_count = 0
          begin
            job = Models::JobState.find_or_create(:job_id=>params[:job_id])
          rescue Sequel::DatabaseError, Sequel::DatabaseConnectionError => e
            if retry_count <= @retry_count.to_i
              retry_count += 1
              sleep @wait_time_sec.to_i
              retry
            else
              raise e
            end
          end
          job.set_fields(params, [:parent_job_id, :session_id, :node_id, :state, :started_at, :finished_at, :job_name]).save_changes
        end
        
        def call(req, res)
          @req, @res = req, res
          raise Rack::UnknownMethodError if @req.command == 'call'
          m = self.method(@req.command)
          raise Rack::UnknownMethodError if m.nil?

          ret = m.call
          @res.response(nil)  if @res.responded?
        end
      end

    end
  end
end
