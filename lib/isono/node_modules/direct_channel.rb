# -*- coding: utf-8 -*-

module Isono
  module NodeModules
    class DirectChannel < Base
      AMQP_EXCHANGE='isono.direct'
      
      initialize_hook do
        @amq = node.create_channel
        @amq.instance_eval {
          def event_exchange
            self.direct(AMQP_EXCHANGE, {:auto_delete=>false})
          end
        }

        # create the exchange
        @amq.event_exchange
      end

      terminate_hook do
      end

      # @example
      #   publish('ev/event_name', :args=>[1, 2, 3])
      def publish(evname, opts={})
        opts = {:args=>[], :sender=>manifest.node_id}.merge(opts)
        
        body = {
          :event => evname,
          :published_at=> Time.now,
          :sender  => opts[:sender],
          :origin_node  => manifest.node_id,
          :args => opts[:args]
        }
        
        EventMachine.schedule {
          @amq.event_exchange.publish(Serializer.instance.marshal(body),
                                            {:key=>"#{evname}"}
                                            )
        }
      end
      
      def subscribe(evname, &blk)
        @amq.queue("#{evname}",{:auto_delete=>true}).bind(
                     AMQP_EXCHANGE, :key=>"#{evname}"
                     ).subscribe { |data|
          data = Serializer.instance.unmarshal(data)
          case blk.arity
          when 2
            m = data.delete(:args)
            blk.call(data, m)
          when 1
            blk.call(data[:args])
          else
            blk.call
          end
        }
      end
      
      def unsubscribe(evname)
        EventMachine.schedule {
          q = @amq.queue("#{evname}",{:auto_delete=>true})
          q.unsubscribe
        }
      end

    end
  end
end

